#!/usr/bin/perl
#
# mushify.pl
#   Convert a string into a version which will look the same after it
#   has been evaluated by a mush. Conversion attempts compression of
#   characters using the repeat() and space() functions in any segment
#   that will actually save characters.
#
#   Also handles vt100 color escape codes to ansi() conversion.
#
use strict;
use IPC::Open2;
my %conf;

#
# dehtml
#    Take the output from ansi2html and remove the extra html and
#    grab any color codes for use in ansi(). Mushify any output
#    that is created for proper formating.
#
sub dehtml
{
   my $input = shift;
   my ($done,$data,$quiet,$ret) = (0,0,1,"%r");
   my $out;

   $ret = "\n" if(@conf{multi});                 # use \n or %r for returns
   $out = $ret if(@conf{leading});                   # prefix with a return
 
   for my $in (split(/\n/,$input)) {                      # split int lines
      $in =~ s/\r//g;
      if($in =~ /^<pre>/) {                # find first line of actual input
         my $leftover = $';
         if($leftover !~ /^\s*$/) {    # process rest of line if !whitespace
            $out = mushify($') . $ret;
            $data = 1;
         }
         $quiet = 0;
      } elsif($quiet || (!$data && $in =~ /^\s*$/)) {
         # ignore leading blank lines or extra html
      } else {
         $data = 1;
         if($in =~ /<\/pre>/) {                               # end of input
            $in = $`;
            $done = 1;                              # process txt before tag
         }

         # look for tags containing html color codes
         while($in =~ /<b class=[^ ]+ style="color:#([^ ]+);">(.*?)<\/b>/) {
            $in = $';
            $out .= mushify($`) . "[ansi(<#$1>," . mushify($2).")]";
         }

         if($done) {                                         # actually done
            return $out . mushify($in);
         } else {
            $out .= mushify($in) . $ret;                 # add leftover text
         }
      }
   }
   return $out;                             # something bad probably happened,
                                            # there should have been a </pre>
                                            # but wasn't. Return whatever was
                                            # collected.
}


#
# ansi2mush
#    This command uses the ansi2html to do the lookups between
#    vt100 color escape codes and the html color codes. The color
#    codes can then be passed into ansi() for the MUSH to display.
#    Any extra html produced by ansi2html is removed.
#
#    Hopefully this will be handled internally once the logic
#    behind the conversion is determined.
#
sub ansi2mush
{
   my $txt = shift;
   my ($RDR,$WTR,$out);

   my $pid = open2($RDR,$WTR,"ansi2html");     # run the ansi2html command
   printf($WTR $txt);                                   # supply the input
   close($WTR);

   while(<$RDR>) {                                        # get the output
      $out .= $_;
   }
   close($RDR);

   if($out ne undef) {
     return dehtml($out);                      # remove the html & mushify
   }
}

#
# mush
#   Convert the a string into its mush equivalent. $flag tells the function
#   if the code is going to be used inside a function. 
#
# note: 
#
#    \ ,     These characters are converted to chr() equalivalent because
#            not all mushes let you escape or {} these characters in the
#            same way when inside ansi() or functions.
#
sub tomush
{
   my ($txt,$flag,$start,$end) = @_;
   my ($i,$out,$output);

   for($i = 0;$i < length($txt);$i++) {                    # cycle each char
      my $ch = substr($txt,$i,1);
      if($ch eq " " && ($i + $start == 0 || ($i + 1 == length($txt) && $flag)||
         $i + $start + 1 == $end && !$flag)) {
         $out = "%b";                                 # special case spaces
      } elsif($ch eq " ") {
         $out = ($out eq " ") ? "%b" : " ";                 # alternate %bs
      } elsif($ch eq "\n") {
         $out = "%r";
      } elsif($ch eq "\\") {
         $out = "[chr(92)]";
      } elsif($ch eq '[' || $ch eq ']' || $ch eq '%' || $ch eq '\\' ||
         $ch eq '{' || $ch eq '}' || ($ch eq "," && $flag)) { # escape char
         $out = "\\$ch";
      } elsif($ch eq ",") {
         $out = "[chr(44)]";
      } else {
         $out = $ch;                                          # normal char
      }
      $output .= $out;                                      # add to output
   }
   return $output;
}

#
# mushify
#    Convert a string into its mush equivalent while trying to use as
#    few characters as possible. Do character compression using the
#    repeat() command.
#
sub mushify
{
   my $txt = shift;
   my ($ch,$done,$start,$i,$mult,$mush,$out,$loc);

   $txt =~ s/\t/     /g;                                      # expand tabs
   $txt =~ s/^\n{2,999}/\n/g;
   for($loc=0,$done=0;$loc <= length($txt);$loc++,$done=0) {
      for($i=1;$i < 10 && $i < (length($txt)- $loc) / 2 && !$done;$i++) {
         my $seg = substr($txt,$loc,$i);
         for($mult=1;$seg eq substr($txt,$loc + ($i*$mult),$i);$mult++) {};
         if(($seg eq " " && $mult > 6) || ((length($mush=tomush($seg,1,0,
            length($txt)))+length($mult) + 11) < (length($seg)*$mult))) {
            $out .= tomush(substr($txt,$start,$loc-$start),0,$loc,length($txt));
            $out .= ($seg eq " ") ? "[space($mult)]" : "[repeat($mush,$mult)]";
            $loc += length($seg) * $mult - 1;                  # skip chars
            $done = 1;                                    # get out of loop
         }
      }  
      $start = $loc + 1 if($done);              # set next starting point
   }
   return $out . tomush(substr($txt,$start,length($txt)),0,$start,length($txt));
}

#
# handle_command_line
#    set any @conf variables based upon what is passed in via the command
#    line.
#
sub handle_command_line
{
   for my $i (0 .. $#ARGV) {
      if(@ARGV[$i] =~ /^--leading$/) {
         @conf{leading} = 1;
      } elsif(@ARGV[$i] =~ /^--multi$/) {
         @conf{multi}= 1;
      } elsif(@ARGV[$i] =~ /^--ansi$/) {
         @conf{ansi}= 1;
      } else {
         printf("Usage: $0 [options]\n\n");
         printf("          --leading : Prefix output with a %r\n");
         printf("          --multi   : Output using multipe lines instead\n");
         printf("                      of one line with %rs\n");
         printf("          --ansi    : Pipe output through ansi2html to\n");
         printf("                      make output mush color friendly\n");
         exit(0);
      }
   }
}

#----[ main ]----------------------------------------------------------------#

handle_command_line();
my $out = join('',<STDIN>);
$out =~ s/[\s\n\r]+$//g;                      # strip trailing spaces/returns

if(@conf{ansi}) {
   printf("%s\n",ansi2mush($out));
} else {
   printf("%r%s\n",mushify($out));
}
